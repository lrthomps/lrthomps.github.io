{"title":"Learning to learn without forgetting: a summary","markdown":{"yaml":{"title":"Learning to learn without forgetting: a summary","categories":["machine learning"],"date":"2019-08-28","description":"Bullet-point form summary of this excellent paper. Contributions include a memory store of past examples; balances learning of new updates with recall of these stored examples; continual (online) learning in supervised and reinforcement learning settings."},"containsRefs":false,"markdown":"\n\n\n<p>Matthew Riemer et. al. <a href=\"https://arxiv.org/abs/1810.11910\">Learning to Learn Without Forgetting by Maximizing Transfer and Minimizing Interference.</a> <em>ICLR</em>, 2019.</p>\n<ul>\n<li>Recall <a href=\"https://en.wikipedia.org/wiki/Catastrophic_interference\">catastrophic forgetting</a>, a neural network sequentially trained on multiple tasks forgets earlier tasks with each new task, apparently not a problem in Bayesian networks</li>\n<li>Why? overwriting weights with updates, …</li>\n<li>How to avoid? limit weight sharing, balance network stability vs plasticity (\"recall of old tasks\" versus \"rapid learning of new ones\"), …</li>\n<li>The loss function: \n    $$\\sum_{i, j} L(x_i , y_i ) + L(x_j , y_j ) − \\alpha {\\partial L(x_i , y_i ) \\over \\partial \\theta} \\cdot {\\partial L(x_j , y_j ) \\over \\partial \\theta}$$</li>\n<li>The regularizing term is a measure of <em>transfer</em> or <em>interference</em> between updates. The gradient wrt to learning parameters guides the backprop update to those parameters: alignment of gradients means the updates agree and will guide learning for both examples; anti-alignment means updates cancel and neither example will learn; any intervening overlap is deemed transfer (interference) for positive (negative) values.</li>\n<li>Maximizing weight sharing maximizes transfer; minimizing weight sharing minimizes the change for interference.</li>\n<li>Work leading up to this paper, both offline algorithms over dataset D:\n<ul>\n<li>MAML -&gt; FOMAML (Finn &amp; Levine, 2017)</li>\n<li>Reptile (Nichol &amp; Schulman, 2018)</li>\n</ul>\n</li>\n<li>Contributions: new algorithm MER, meta experience replay, an online algorithm (algorithms 1 with variants 6 &amp; 7):\n<ul>\n<li>added an inner loop within Reptile batches for an inner meta-learning update</li>\n<li>keeps a memory/reservoir of examples M to approximate the full dataset D with new examples added probabilistically to replace old ones (see algorithm 3 in the paper)</li>\n<li>prioritizes learning of the current examples, esp. because it may not be saved</li>\n</ul>\n</li>\n<li>First, the reptile algorithm:\n<ul>\n<li>for each epoch of training, $t$, record the current params, $\\theta^A_0 = \\theta_{t-1}$ and sample $s$ batches of size $k$</li>\n<li>perform a normal epoch of training over the $s$ batches with learning rate $\\alpha$ toward final params $\\theta^A_s$</li>\n<li>update the network weights for this epoch only a fraction of the learned param changes: \n    $$\\theta_t = \\theta^A_0 + \\gamma (\\theta^A_s - \\theta^A_0)$$</li>\n<li>this meta-learning update enacts the effective loss \n    $$2\\sum_{i=1}^s L(B_i) - \\sum_{j=1}^{i-1} {\\partial L(B_i) \\over \\partial \\theta} \\cdot {\\partial L(B_j) \\over \\partial \\theta}$$\n</li>\n</ul>\n</li>\n<li>MER adds a second meta-learning update within each of the $s$ batches, now sampled from reservoir M, each of which will have the current example in it; finally, the reservoir is updated (maybe)\n<ul>\n<li>for each epoch of training, $t$, record the current params, $\\theta^A_0 = \\theta_{t-1}$ and sample $s$ batches of size $k$, include example $x_t, y_t$ in each</li>\n<li>for each batch $i$, record the current params, $\\theta^A_{i, 0} = \\theta^A_{i-1}$</li>\n<li>for each example $j$ in the batch, perform a backprop update with learning rate \n    $\\alpha$ to params $\\theta^A_{i, j}$</li>\n<li>after the entire batch has been singly learned, meta-learn the parameter update \n    $$\\theta^A_i = \\theta^A_{i, 0} + \\beta (\\theta^A_{i, k} - \\theta^A_{i, 0})$$</li>\n<li>the effective loss is \n    $$2\\sum_{i=1}^s \\sum_{j=1}^k L(x_{ij}, y_{ij}) - \\sum_{q=1}^{i-1}\\sum_{r=1}^{j-1} {\\partial L(x_{ij}, y_{ij}) \\over \\partial \\theta} \\cdot {\\partial L(x_{qr}, y_{qr}) \\over \\partial \\theta}$$</li>\n<li>note that they update the batch examples singly to maximize the regularizing effect</li>\n<li>algorithms 6 &amp; 7 are alternate ways of prioritizing the current example</li>\n</ul>\n</li>\n<li>Evaluation metrics:\n<ul>\n<li>learning accuracy (LA): average accuracy for each task immediately after it has been learned</li>\n<li>retained accuracy (RA): final retained accuracy across all tasks learned sequentially</li>\n<li>backward transfer and interference (BTI): the average change in accuracy from when a task is learned to the end of training (positive good; large and negative is catastrophic forgetting)</li>\n</ul>\n</li>\n<li>Problems:\n<ul>\n<li>in supervised learning: MNIST permutations, each task is transformed by a fixed permutation of the MNIST pixels; MNIST rotations, each task contains digits rotated by a fixed angle between 0 and 180 degrees; Omniglot, each task is one of 50 alphabets with overall 1623 characters</li>\n<li>in reinforcement learning: Catcher, a board moved left/right to catch a more and more rapidly falling object; Flappy Bird must fly between ever tightening pipes</li>\n</ul>\n</li>\n<li>Compared against:\n<ul>\n<li>online, same network trained straightforwardly one example at a time on the incoming non-stationary training data by simply applying SGD</li>\n<li>independent, one model per task with size of network reduced proportionally to keep total number of parameters fixed</li>\n<li>task input, trained as in online with a dedicated input layer per task</li>\n<li>EWC, Elastic Weight Consolidation (EWC) (Kirkpatrick et al., 2017), ~online regularized to avoid catastrophic forgetting</li>\n<li>GEM: Gradient Episodic Memory (GEM) (Lopez-Paz &amp; Ranzato, 2017) uses episodic storage to modify gradients of latest example to not interfere with past ones; stored examples are not used in ongoing training\nFindings:</li>\n<li>MER seems to do learn and retain the most over all tasks, faster, and with less memory</li>\n<li>my reservations:\n<ul>\n  <li>mnist again?</li>\n  <li>omniglot is not usually studied with any of the algorithms compared against: in Lake (2015) they achieve &lt;5% error rate, still &lt;15% in a stripped down version of their model and 2 out of 3 of their baselines</li>\n  <li>how much slower will the training be with single example batches and two meta-learning updates?</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","srcMarkdownNoYaml":"\n\n\n<p>Matthew Riemer et. al. <a href=\"https://arxiv.org/abs/1810.11910\">Learning to Learn Without Forgetting by Maximizing Transfer and Minimizing Interference.</a> <em>ICLR</em>, 2019.</p>\n<ul>\n<li>Recall <a href=\"https://en.wikipedia.org/wiki/Catastrophic_interference\">catastrophic forgetting</a>, a neural network sequentially trained on multiple tasks forgets earlier tasks with each new task, apparently not a problem in Bayesian networks</li>\n<li>Why? overwriting weights with updates, …</li>\n<li>How to avoid? limit weight sharing, balance network stability vs plasticity (\"recall of old tasks\" versus \"rapid learning of new ones\"), …</li>\n<li>The loss function: \n    $$\\sum_{i, j} L(x_i , y_i ) + L(x_j , y_j ) − \\alpha {\\partial L(x_i , y_i ) \\over \\partial \\theta} \\cdot {\\partial L(x_j , y_j ) \\over \\partial \\theta}$$</li>\n<li>The regularizing term is a measure of <em>transfer</em> or <em>interference</em> between updates. The gradient wrt to learning parameters guides the backprop update to those parameters: alignment of gradients means the updates agree and will guide learning for both examples; anti-alignment means updates cancel and neither example will learn; any intervening overlap is deemed transfer (interference) for positive (negative) values.</li>\n<li>Maximizing weight sharing maximizes transfer; minimizing weight sharing minimizes the change for interference.</li>\n<li>Work leading up to this paper, both offline algorithms over dataset D:\n<ul>\n<li>MAML -&gt; FOMAML (Finn &amp; Levine, 2017)</li>\n<li>Reptile (Nichol &amp; Schulman, 2018)</li>\n</ul>\n</li>\n<li>Contributions: new algorithm MER, meta experience replay, an online algorithm (algorithms 1 with variants 6 &amp; 7):\n<ul>\n<li>added an inner loop within Reptile batches for an inner meta-learning update</li>\n<li>keeps a memory/reservoir of examples M to approximate the full dataset D with new examples added probabilistically to replace old ones (see algorithm 3 in the paper)</li>\n<li>prioritizes learning of the current examples, esp. because it may not be saved</li>\n</ul>\n</li>\n<li>First, the reptile algorithm:\n<ul>\n<li>for each epoch of training, $t$, record the current params, $\\theta^A_0 = \\theta_{t-1}$ and sample $s$ batches of size $k$</li>\n<li>perform a normal epoch of training over the $s$ batches with learning rate $\\alpha$ toward final params $\\theta^A_s$</li>\n<li>update the network weights for this epoch only a fraction of the learned param changes: \n    $$\\theta_t = \\theta^A_0 + \\gamma (\\theta^A_s - \\theta^A_0)$$</li>\n<li>this meta-learning update enacts the effective loss \n    $$2\\sum_{i=1}^s L(B_i) - \\sum_{j=1}^{i-1} {\\partial L(B_i) \\over \\partial \\theta} \\cdot {\\partial L(B_j) \\over \\partial \\theta}$$\n</li>\n</ul>\n</li>\n<li>MER adds a second meta-learning update within each of the $s$ batches, now sampled from reservoir M, each of which will have the current example in it; finally, the reservoir is updated (maybe)\n<ul>\n<li>for each epoch of training, $t$, record the current params, $\\theta^A_0 = \\theta_{t-1}$ and sample $s$ batches of size $k$, include example $x_t, y_t$ in each</li>\n<li>for each batch $i$, record the current params, $\\theta^A_{i, 0} = \\theta^A_{i-1}$</li>\n<li>for each example $j$ in the batch, perform a backprop update with learning rate \n    $\\alpha$ to params $\\theta^A_{i, j}$</li>\n<li>after the entire batch has been singly learned, meta-learn the parameter update \n    $$\\theta^A_i = \\theta^A_{i, 0} + \\beta (\\theta^A_{i, k} - \\theta^A_{i, 0})$$</li>\n<li>the effective loss is \n    $$2\\sum_{i=1}^s \\sum_{j=1}^k L(x_{ij}, y_{ij}) - \\sum_{q=1}^{i-1}\\sum_{r=1}^{j-1} {\\partial L(x_{ij}, y_{ij}) \\over \\partial \\theta} \\cdot {\\partial L(x_{qr}, y_{qr}) \\over \\partial \\theta}$$</li>\n<li>note that they update the batch examples singly to maximize the regularizing effect</li>\n<li>algorithms 6 &amp; 7 are alternate ways of prioritizing the current example</li>\n</ul>\n</li>\n<li>Evaluation metrics:\n<ul>\n<li>learning accuracy (LA): average accuracy for each task immediately after it has been learned</li>\n<li>retained accuracy (RA): final retained accuracy across all tasks learned sequentially</li>\n<li>backward transfer and interference (BTI): the average change in accuracy from when a task is learned to the end of training (positive good; large and negative is catastrophic forgetting)</li>\n</ul>\n</li>\n<li>Problems:\n<ul>\n<li>in supervised learning: MNIST permutations, each task is transformed by a fixed permutation of the MNIST pixels; MNIST rotations, each task contains digits rotated by a fixed angle between 0 and 180 degrees; Omniglot, each task is one of 50 alphabets with overall 1623 characters</li>\n<li>in reinforcement learning: Catcher, a board moved left/right to catch a more and more rapidly falling object; Flappy Bird must fly between ever tightening pipes</li>\n</ul>\n</li>\n<li>Compared against:\n<ul>\n<li>online, same network trained straightforwardly one example at a time on the incoming non-stationary training data by simply applying SGD</li>\n<li>independent, one model per task with size of network reduced proportionally to keep total number of parameters fixed</li>\n<li>task input, trained as in online with a dedicated input layer per task</li>\n<li>EWC, Elastic Weight Consolidation (EWC) (Kirkpatrick et al., 2017), ~online regularized to avoid catastrophic forgetting</li>\n<li>GEM: Gradient Episodic Memory (GEM) (Lopez-Paz &amp; Ranzato, 2017) uses episodic storage to modify gradients of latest example to not interfere with past ones; stored examples are not used in ongoing training\nFindings:</li>\n<li>MER seems to do learn and retain the most over all tasks, faster, and with less memory</li>\n<li>my reservations:\n<ul>\n  <li>mnist again?</li>\n  <li>omniglot is not usually studied with any of the algorithms compared against: in Lake (2015) they achieve &lt;5% error rate, still &lt;15% in a stripped down version of their model and 2 out of 3 of their baselines</li>\n  <li>how much slower will the training be with single example batches and two meta-learning updates?</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"learning-to-learn-without-forgetting-summary.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","theme":{"light":"cosmo","dark":["cosmo","../theme-dark.scss"]},"max-width":"500px","title-block-banner":true,"author":"Lara Thompson","title":"Learning to learn without forgetting: a summary","categories":["machine learning"],"date":"2019-08-28","description":"Bullet-point form summary of this excellent paper. Contributions include a memory store of past examples; balances learning of new updates with recall of these stored examples; continual (online) learning in supervised and reinforcement learning settings."},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}